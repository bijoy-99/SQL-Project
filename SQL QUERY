create database pizzahut;

--Retrieve the total number of orders placed.

select count(order_id) as total_orders from orders;

--Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price), 2) AS total_sales
FROM 
    order_details
JOIN 
    pizzas ON pizzas.pizza_id = order_details.pizza_id;

--Identify the highest-priced pizza.


SELECT TOP 1 
    pizza_types.name, 
    pizzas.price
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY 
    pizzas.price DESC;


--Identify the most common pizza size ordered.

SELECT TOP 1  
    pizzas.size, 
    COUNT(order_details.order_details_id) AS order_count
FROM 
    pizzas
JOIN 
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizzas.size
ORDER BY 
    order_count DESC;

	--List the top 5 most ordered pizza types along with their quantities.

	SELECT TOP 5
    pizza_types.name, 
    SUM(order_details.quantity) AS quantity
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.name
ORDER BY 
    quantity DESC;
--Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS quantity
FROM 
    pizza_types
JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.category
ORDER BY 
    quantity DESC;
--Determine the distribution of orders by hour of the day.

SELECT 
    DATEPART(HOUR, time) AS hour,
    COUNT(order_id) AS order_count
FROM 
    orders
GROUP BY 
    DATEPART(HOUR, time)
ORDER BY 
    hour;
	
	--Join relevant tables to find the category-wise distribution of pizzas.

	SELECT category , COUNT(name) FROM pizza_types
	GROUP BY category;




	--Group the orders by date and calculate the average number of pizzas ordered per day.

	
	SELECT 
    ROUND(AVG(quantity), 0) AS average_quantity
FROM (
    SELECT 
        orders.date, 
        SUM(order_details.quantity) AS quantity
    FROM 
        orders
    JOIN 
        order_details ON orders.order_id = order_details.order_id
    GROUP BY 
        orders.date
) AS order_quantity;




--Determine the top 3 most ordered pizza types based on revenue.

SELECT TOP 3 
    pizza_types.name, 
    SUM(order_details.quantity * pizzas.price) AS revenue
FROM 
    pizza_types
JOIN 
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN 
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY  
    pizza_types.name
ORDER BY 
    revenue DESC;

--Calculate the percentage contribution of each pizza type to total revenue.
SELECT 
    pizza_types.category,
    ROUND(SUM(order_details.quantity * pizzas.price) * 100.0 / 
        (SELECT SUM(order_details.quantity * pizzas.price)
         FROM order_details
         JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id), 2) AS percentage_of_total_sales
FROM 
    pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizza_types.category
ORDER BY 
    percentage_of_total_sales DESC;

	--Analyze the cumulative revenue generated over time.

SELECT 
    date,
    SUM(revenue) OVER (ORDER BY date) AS cum_revenue
FROM (
    SELECT 
        orders.date,
        SUM(order_details.quantity * pizzas.price) AS revenue
    FROM 
        order_details
    JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
    JOIN orders ON orders.order_id = order_details.order_id
    GROUP BY 
        orders.date
) AS Sales
ORDER BY 
    date;




	--Determine the top 3 most ordered pizza types based on revenue for each pizza category.
select name, revenue from 
	(select category, name, revenue,
rank() over(partition by category order by revenue desc) as rn
from
(
  select pizza_types.category, pizza_types.name,
  sum((order_details.quantity) * pizzas.price) as revenue
  from pizza_types 
  join pizzas 
    on pizza_types.pizza_type_id = pizzas.pizza_type_id
  join order_details 
    on order_details.pizza_id = pizzas.pizza_id
  group by pizza_types.category, pizza_types.name
) as a) as b
where rn <=3;
